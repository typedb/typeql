/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

eof_query = { SOI ~ query ~ EOI }
eof_queries = { SOI ~ query+ ~ EOI }
eof_pattern = { SOI ~ pattern ~ EOI }
eof_patterns = { SOI ~ patterns ~ EOI }
eof_definables = { SOI ~ definables ~ EOI }
eof_statement = { SOI ~ statement ~ EOI }
eof_label = { SOI ~ label ~ EOI }
eof_schema_rule = { SOI ~ schema_rule ~ EOI }

// TYPEQL QUERY LANGUAGE ========================================================

query = { query_define          | query_undefine
        | query_insert          | query_update
        | query_delete          | query_fetch
        | query_get_group_agg   | query_get_group
        | query_get_aggregate   | query_get
        }

query_define = { clause_define }
query_undefine = { clause_undefine }
query_insert = { clause_match ~ clause_insert ~ modifiers | clause_insert }
query_delete = { clause_match ~ clause_delete ~ modifiers }
query_update = { query_delete ~ clause_insert ~ modifiers }

query_get_group_agg = { query_get ~ clause_group ~ clause_aggregate }
query_get_group = { query_get ~ clause_group }
query_get_aggregate = { query_get ~ clause_aggregate }
query_get = { clause_match ~ clause_get ~ modifiers }

query_fetch = { clause_match ~ clause_fetch ~ modifiers }

clause_define = { DEFINE ~ definables }
clause_undefine = { UNDEFINE ~ definables }
clause_match = { MATCH ~ patterns }
clause_insert = { INSERT ~ statement_things }
clause_delete = { DELETE ~ statement_things}
clause_get = { GET ~ VAR_? ~ ( "," ~ VAR_ )* ~ ";" }
clause_group = { GROUP ~ VAR_ ~ ";" }
clause_fetch = { FETCH ~ projections }
clause_aggregate = { aggregate_method ~ VAR_? ~ ";" }
aggregate_method = { COUNT | MAX | MEAN | MEDIAN | MIN | STD | SUM }

// QUERY MODIFIERS =============================================================

modifiers = { (sort ~ ";")? ~ (offset ~ ";")? ~ (limit ~ ";")? }
sort = { SORT ~ var_order ~ ( "," ~ var_order )* }
var_order = { VAR_ ~ ORDER_? }
offset = { OFFSET ~ LONG_ }
limit = { LIMIT ~ LONG_ }

// FETCH QUERY =================================================================

projections = { (projection ~ ";")+ }
projection = { projection_key_var ~ ":" ~ projection_attributes
             | projection_key_var
             | projection_key_label ~ ":" ~ "{" ~ projection_subquery ~ "}" }

projection_attributes = { projection_attribute ~ ( "," ~ projection_attribute )* }
projection_attribute = { label ~ projection_key_as_label? }

projection_subquery = { query_fetch | query_get_aggregate }

projection_key_var = { VAR_ ~ projection_key_as_label? }
projection_key_as_label = { AS ~ projection_key_label }
projection_key_label = { QUOTED_STRING | label }

// SCHEMA QUERY ================================================================

definables = { ( definable ~ ";" )+ }
definable = { statement_type | schema_rule | schema_rule_label }

// QUERY PATTERNS ==============================================================

patterns = { ( pattern ~ ";" )+ }
pattern = { statement | pattern_disjunction | pattern_conjunction | pattern_negation }

pattern_conjunction = { "{" ~ patterns ~ "}" }
pattern_disjunction = { "{" ~ patterns ~ "}" ~ ( OR ~ "{" ~ patterns ~ "}" )+ }
pattern_negation = { NOT ~ "{" ~ patterns ~ "}" }

// STATEMENTS ==================================================================

statement = { statement_concept | statement_type | statement_thing_any | statement_value }

// CONCEPT STATEMENTS ==========================================================

statement_concept = { VAR_CONCEPT_ ~ IS ~ VAR_CONCEPT_ }

// TYPE STATEMENTS =============================================================

statement_type = { type_ref_any ~ type_constraint ~ ( "," ~ type_constraint )* }
type_constraint = { ABSTRACT
                  | OWNS ~ type_ref ~ ( AS ~ type_ref)? ~ annotations_owns
                  | PLAYS ~ type_ref_scoped ~ ( AS ~ type_ref)?
                  | REGEX ~ QUOTED_STRING
                  | RELATES ~ type_ref ~ ( AS ~ type_ref)?
                  | SUB_ ~ type_ref_any
                  | TYPE ~ label_any
                  | VALUE ~ value_type
                  }

annotations_owns = { ( ANNOTATION_KEY )? ~ ( ANNOTATION_UNIQUE )? }

// VALUE STATEMENTS ============================================================

statement_value = { VAR_VALUE_ ~ ASSIGN ~ expression
                  | VAR_VALUE_ ~ predicate
                  }

// THING STATEMENTS ============================================================

statement_things = { ( statement_thing_any ~ ";" )+ }
statement_thing_any = { statement_thing | statement_relation | statement_attribute }

statement_thing = { VAR_CONCEPT_ ~ ISA_ ~ type_ref ~ ( "," ~ attributes )?
                  | VAR_CONCEPT_ ~ IID ~ IID_ ~ ( "," ~ attributes )?
                  | VAR_CONCEPT_ ~ attributes
                  }

statement_relation = { VAR_CONCEPT_? ~ relation ~ ISA_ ~ type_ref ~ ( "," ~ attributes )?
                     | VAR_CONCEPT_? ~ relation ~ attributes? }

statement_attribute = { VAR_CONCEPT_? ~ predicate ~ ISA_ ~ type_ref ~ ( "," ~ attributes )?
                      | VAR_CONCEPT_? ~ predicate ~ attributes? }

// RELATION CONSTRUCT ==========================================================

relation = { "(" ~ role_player ~ ( "," ~ role_player )* ~ ")" }                 // A list of role players in a Relations
role_player = { type_ref ~ ":" ~ player | player }                                 // The Role type and player variable or just the player variable
player = { VAR_CONCEPT_ }                                                       // A player is just a variable

// ATTRIBUTE CONSTRUCT =========================================================

attributes = { attribute ~ ( "," ~ attribute )* }
attribute = { HAS ~ label ~ ( VAR_ | predicate )                                // ownership by labeled variable or value or just value
            | HAS ~ VAR_CONCEPT_
            }

// VALUE CONSTRUCT =============================================================

value = { constant | VAR_ }

// PREDICATE CONSTRUCTS ========================================================

predicate = { constant | predicate_equality ~ value | predicate_substring ~ QUOTED_STRING }

predicate_equality = { EQ | NEQ | GTE | GT | LTE | LT
                     | ASSIGN                                                   // Backwards compatibility till 3.0
                     }

predicate_substring = { CONTAINS | LIKE }

// EXPRESSION CONSTRUCTS =======================================================

expression = { expression_base ~ ( expression_operator ~ expression_base )* }

expression_base = _{ VAR_ | expression_function | constant | expression_parenthesis }

expression_operator = _{ POWER | MULTIPLY | DIVIDE | MODULO | ADD | SUBTRACT }
expression_parenthesis = { PAREN_OPEN ~ expression ~ PAREN_CLOSE }

expression_function = { expression_function_name ~ "(" ~ expression_arguments? ~ ")" }
expression_function_name = { EXPR_FUNC_NAME | MAX | MIN }
expression_arguments = _{ expression ~ ( "," ~ expression )* }

// SCHEMA CONSTRUCT ============================================================

schema_rule_label = { RULE ~ label }
schema_rule = { RULE ~ label ~ ":" ~ WHEN ~ "{" ~ patterns ~ "}" ~ THEN ~ "{" ~ statement_thing_any ~ ";" ~ "}" }

// TYPE, LABEL AND IDENTIFIER CONSTRUCTS =======================================

type_ref_any = { type_ref_scoped | type_ref | VAR_CONCEPT_ }
type_ref_scoped = { label_scoped | VAR_CONCEPT_ }
type_ref = { label | VAR_CONCEPT_ }

label_any = { label_scoped | label }
label_scoped = { LABEL_SCOPED_ }
label = { LABEL_ | type_native | unreserved }

// LITERAL INPUT VALUES ========================================================

type_native = { THING | ENTITY | ATTRIBUTE | RELATION | ROLE }

value_type = { LONG | DOUBLE | STRING | BOOLEAN | DATETIME }
constant = { QUOTED_STRING | DATETIME_ | DATE_ | BOOLEAN_
           | signed_double | signed_long
           }

signed_double = { sign? ~ DOUBLE_ }
signed_long = { sign? ~ LONG_ }
sign = { ADD | SUBTRACT }

// UNRESERVED KEYWORDS =========================================================
// Most of TypeQL syntax should not be reserved from being used as identifiers

unreserved = { VALUE | EXPR_FUNC_NAME
             | MIN | MAX | MEDIAN | MEAN | STD | SUM | COUNT
             | GET | SORT | LIMIT | OFFSET | GROUP | CONTAINS
             | RULE
             }


// TYPEQL SYNTAX KEYWORDS =======================================================

// QUERY COMMAND KEYWORDS

MATCH = @{ "match" ~ WB }
GET = @{ "get" ~ WB }
FETCH = @{ "fetch" ~ WB }
DEFINE = @{ "define" ~ WB }
UNDEFINE = @{ "undefine" ~ WB }
INSERT = @{ "insert" ~ WB }
DELETE = @{ "delete" ~ WB }
COMPUTE = @{ "compute" ~ WB }

// NATIVE TYPE KEYWORDS

THING = @{ "thing" ~ WB }
ENTITY = @{ "entity" ~ WB }
ATTRIBUTE = @{ "attribute" ~ WB }
RELATION = @{ "relation" ~ WB }
ROLE = @{ "role" ~ WB }
RULE = @{ "rule" ~ WB }

// DELETE AND GET QUERY MODIFIER KEYWORDS

OFFSET = @{ "offset" ~ WB }
LIMIT = @{ "limit" ~ WB }
SORT = @{ "sort" ~ WB }
ORDER_ = @{ ASC | DESC }
ASC = @{ "asc" ~ WB }
DESC = @{ "desc" ~ WB }

// TYPE VARIABLE CONSTRAINT KEYWORDS

TYPE = @{ "type" ~ WB }
ABSTRACT = @{ "abstract" ~ WB }
SUB_ = ${ SUBX | SUB }
SUB = @{ "sub" ~ WB }
SUBX = @{ "sub!" ~ WB }
OWNS = @{ "owns" ~ WB }
REGEX = @{ "regex" ~ WB }
AS = @{ "as" ~ WB }
PLAYS = @{ "plays" ~ WB }
RELATES = @{ "relates" ~ WB }
WHEN = @{ "when" ~ WB }
THEN = @{ "then" ~ WB }

// TYPE ANNOTATIONS

ANNOTATION_KEY = @{ "@key" ~ WB }
ANNOTATION_UNIQUE = @{ "@unique" ~ WB}

// THING VARIABLE CONSTRAINT KEYWORDS

IID = @{ "iid" ~ WB }
ISA_ = ${ ISAX | ISA }
ISA = @{ "isa" ~ WB }
ISAX = @{ "isa!" ~ WB }
HAS = @{ "has" ~ WB }
VALUE = @{ "value" ~ WB }
IS = @{ "is" ~ WB }

// OPERATOR KEYWORDS

OR = @{ "or" ~ WB }
NOT = @{ "not" ~ WB }

// PREDICATE KEYWORDS

EQ = @{ "==" }
NEQ = @{ "!=" }
GT = @{ ">" }
GTE = @{ ">=" }
LT = @{ "<" }
LTE = @{ "<=" }
LIKE = @{ "like" ~ WB }
CONTAINS = @{ "contains" ~ WB }

// ASSIGNMENT AND EXPRESSION KEYWORDS

ASSIGN = @{ "=" }
ADD = @{ "+" }
SUBTRACT = @{ "-" }
DIVIDE = @{ "/" }
MULTIPLY = @{ "*" }
POWER = @{ "^" }
MODULO = @{ "%" }
PAREN_OPEN = _{ "(" }
PAREN_CLOSE = _{ ")" }

// Incomplete list of function names usable in expressions. The 'expression_function_name' rule references all function names.
EXPR_FUNC_NAME = _{ ABS | CEIL | FLOOR | ROUND }
ABS = @{ "abs" }
CEIL = @{ "ceil" }
FLOOR = @{ "floor" }
ROUND = @{ "round" }

// GROUP AND AGGREGATE QUERY KEYWORDS (also used by COMPUTE QUERY)

GROUP = @{ "group" ~ WB }
COUNT = @{ "count" ~ WB }
MAX = @{ "max" ~ WB }
MIN = @{ "min" ~ WB }
MEAN = @{ "mean" ~ WB }
MEDIAN = @{ "median" ~ WB }
STD = @{ "std" ~ WB }
SUM = @{ "sum" ~ WB }

// VALUE TYPE KEYWORDS

LONG = @{ "long" ~ WB }
DOUBLE = @{ "double" ~ WB }
STRING = @{ "string" ~ WB }
BOOLEAN = @{ "boolean" ~ WB }
DATETIME = @{ "datetime" ~ WB }

// LITERAL VALUE KEYWORDS
BOOLEAN_ = @{ TRUE | FALSE } // order of lexer declaration matters
TRUE = @{ "true" ~ WB }
FALSE = @{ "false" ~ WB }
QUOTED_STRING = @{ "\"" ~ (!"\"" ~ !"\\" ~ ANY | ESCAPE_SEQ_ )* ~ "\""
                 | "'"  ~ (!"'"  ~ !"\\" ~ ANY | ESCAPE_SEQ_ )* ~ "'"  }
LONG_ = @{ ASCII_DIGIT+ ~ WB }
DOUBLE_ = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ ~ WB }
DATE_ = @{ DATE_FRAGMENT_ ~ WB }
DATETIME_ = @{ DATE_FRAGMENT_ ~ "T" ~ TIME_ ~ WB }

// TYPEQL INPUT TOKEN PATTERNS
// All token names must end with an underscore ("_")
VAR_ = ${ VAR_CONCEPT_ | VAR_VALUE_ }
VAR_CONCEPT_ = @{ VAR_CONCEPT_ANONYMOUS_ | VAR_CONCEPT_NAMED_ }
VAR_CONCEPT_ANONYMOUS_ = @{ "$_" ~ WB }
VAR_CONCEPT_NAMED_ = @{ "$" ~ ASCII_ALPHANUMERIC ~ (ASCII_ALPHANUMERIC | "-" | "_")* ~ WB }
VAR_VALUE_ = @{ "?" ~ ASCII_ALPHANUMERIC ~ (ASCII_ALPHANUMERIC | "-" | "_")* ~ WB }
IID_ = @{ "0x" ~ ASCII_HEX_DIGIT+ ~ WB }
LABEL_ = @{ TYPE_CHAR_H_ ~ TYPE_CHAR_T_* ~ WB }
LABEL_SCOPED_ = @{ LABEL_ ~ ":" ~ LABEL_ ~ WB }


// FRAGMENTS OF KEYWORDS =======================================================

TYPE_CHAR_H_ = @{ ASCII_ALPHA
               | '\u{00C0}'..'\u{00D6}'
               | '\u{00D8}'..'\u{00F6}'
               | '\u{00F8}'..'\u{02FF}'
               | '\u{0370}'..'\u{037D}'
               | '\u{037F}'..'\u{1FFF}'
               | '\u{200C}'..'\u{200D}'
               | '\u{2070}'..'\u{218F}'
               | '\u{2C00}'..'\u{2FEF}'
               | '\u{3001}'..'\u{D7FF}'
               | '\u{F900}'..'\u{FDCF}'
               | '\u{FDF0}'..'\u{FFFD}'
               }
TYPE_CHAR_T_ = @{ TYPE_CHAR_H_
               | ASCII_DIGIT
               | "_"
               | "-"
               | "\u{00B7}"
               | '\u{0300}'..'\u{036F}'
               | '\u{203F}'..'\u{2040}'
               }
DATE_FRAGMENT_ = @{ YEAR_ ~ "-" ~ MONTH_ ~ "-" ~ DAY_ }
MONTH_ = @{ ('0'..'1') ~ ASCII_DIGIT }
DAY_ = @{ ('0'..'3') ~ ASCII_DIGIT }
YEAR_ = @{ ASCII_DIGIT{4} | ("+" | "-") ~ ASCII_DIGIT+ }
TIME_ = @{ HOUR_ ~ ":" ~ MINUTE_ ~ (":" ~ SECOND_ ~ ("." ~ SECOND_FRACTION_)? )? }
HOUR_ = @{ ('0'..'2') ~ ASCII_DIGIT }
MINUTE_ = @{ ('0'..'6') ~ ASCII_DIGIT }
SECOND_ = @{ ('0'..'6') ~ ASCII_DIGIT }
SECOND_FRACTION_ = @{ ASCII_DIGIT{1,3} } // between 1 and 3 digits
ESCAPE_SEQ_ = @{ "\\" ~ ANY }

WB = _{ &(PUNCTUATION | WHITESPACE | COMMENT | EOI) } // Word boundary

COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI) }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
