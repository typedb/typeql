eof_query = { SOI ~ query ~ EOI }
eof_queries = { SOI ~ query+ ~ EOI }
eof_pattern = { SOI ~ pattern ~ EOI }
eof_patterns = { SOI ~ patterns ~ EOI }
eof_definables = { SOI ~ definables ~ EOI }
eof_variable = { SOI ~ pattern_variable ~ EOI }
eof_label = { SOI ~ label ~ EOI }
eof_schema_rule = { SOI ~ schema_rule ~ EOI }

// TYPEQL QUERY LANGUAGE ========================================================

query = { query_define          | query_undefine
        | query_insert          | query_update
        | query_delete
        | query_match_group_agg | query_match_group
        | query_match_aggregate | query_match
        }
    query_define = { DEFINE ~ definables }
    query_undefine = { UNDEFINE ~ definables }
    query_insert = { (MATCH ~ patterns)? ~ INSERT ~ variable_things }
    query_update = { query_delete ~ INSERT ~ variable_things }
    query_delete = { MATCH ~ patterns ~ DELETE ~ variable_things }
    query_match = { MATCH ~ patterns ~ modifiers }

// MATCH QUERY ANSWER GROUP AND AGGREGATE FUNCTIONS ============================

    query_match_aggregate = { query_match ~ match_aggregate }
    query_match_group = { query_match ~ match_group }
    query_match_group_agg = { query_match ~ match_group ~ match_aggregate }

// MATCH QUERY MODIFIERS =======================================================

modifiers = { (filter ~ SEMICOLON)? ~ (sort ~ SEMICOLON)? ~ (offset ~ SEMICOLON)? ~ (limit ~ SEMICOLON)? }

filter = { GET ~ VAR_ ~ ( "," ~ VAR_ )* }
sort = { SORT ~ var_order ~ ( "," ~ var_order )* }
var_order = { VAR_ ~ ORDER_? }
offset = { OFFSET ~ LONG_ }
limit = { LIMIT ~ LONG_ }


// GET AGGREGATE QUERY =========================================================
//
// An aggregate function is composed of 2 things=
// The aggregate method name, followed by the variable to apply the function to

match_aggregate = { aggregate_method ~ VAR_? ~ SEMICOLON } // method and, optionally, a variable
aggregate_method = { COUNT | MAX | MEAN | MEDIAN | MIN | STD | SUM }

// GET GROUP QUERY =============================================================

match_group = { GROUP ~ VAR_ ~ SEMICOLON }

// SCHEMA QUERY ===============================================================

definables = { ( definable ~ SEMICOLON )+ }
definable = { variable_type | schema_rule }

// QUERY PATTERNS ==============================================================

patterns = { ( pattern ~ SEMICOLON )+ }
pattern = { pattern_variable | pattern_disjunction | pattern_conjunction | pattern_negation }

pattern_conjunction = { "{" ~ patterns ~ "}" }
pattern_disjunction = { "{" ~ patterns ~ "}" ~ ( OR ~ "{" ~ patterns ~ "}" )+ }
pattern_negation = { NOT ~ "{" ~ patterns ~ "}" }

// VARIABLE PATTERNS ===========================================================

pattern_variable = { variable_concept | variable_type | variable_thing_any }

// CONCEPT VARAIBLES ===========================================================

variable_concept = { VAR_ ~ IS ~ VAR_ }

// TYPE VARIABLES ==============================================================

variable_type = { type_any ~ type_constraint ~ ( "," ~ type_constraint )* }
type_constraint = { ABSTRACT | SUB_ ~ type_any | OWNS ~ type_ ~ ( AS ~ type_)? ~ ( IS_KEY )? | RELATES ~ type_ ~ ( AS ~ type_)? | PLAYS ~ type_scoped ~ ( AS ~ type_)? | VALUE ~ value_type | REGEX ~ STRING_ | TYPE ~ label_any }


// THING VARIABLES =============================================================

variable_things = { ( variable_thing_any ~ SEMICOLON )+ }
variable_thing_any = { variable_thing | variable_relation | variable_attribute }

variable_thing = { VAR_ ~ ISA_ ~ type_ ~ ( "," ~ attributes )? | VAR_ ~ IID ~ IID_ ~ ( "," ~ attributes )? | VAR_ ~ attributes }

variable_relation = { VAR_? ~ relation ~ ISA_ ~ type_ ~ ( "," ~ attributes )? | VAR_? ~ relation ~ attributes? }

variable_attribute = { VAR_? ~ predicate ~ ISA_ ~ type_ ~ ( "," ~ attributes )? | VAR_? ~ predicate ~ attributes? }


// RELATION CONSTRUCT ==========================================================

relation = { "(" ~ role_player ~ ( "," ~ role_player )* ~ ")" } // A list of role players in a Relations
role_player = { type_ ~ ":" ~ player | player } // The Role type and player variable or just the player variable
player = { VAR_ } // A player is just a variable

// ATTRIBUTE CONSTRUCT =========================================================

attributes = { attribute ~ ( "," ~ attribute )* }
attribute = { HAS ~ label ~ ( VAR_ | predicate ) | HAS ~ VAR_ } // ownership by labeled variable or value or just value

// ATTRIBUTE VALUATION CONSTRUCTS ==============================================

predicate = { value | predicate_equality ~ predicate_value | predicate_substring ~ STRING_ }

predicate_equality = { EQ | NEQ | GTE | GT | LTE | LT }
predicate_substring = { CONTAINS | LIKE }

predicate_value = { value | VAR_ }

// SCHEMA CONSTRUCT =============================================================

schema_rule = { RULE ~ label ~ (":" ~ WHEN ~ "{" ~ patterns ~ "}" ~ THEN ~ "{" ~ variable_thing_any ~ SEMICOLON ~ "}")? }

// TYPE, LABEL AND IDENTIFIER CONSTRUCTS =======================================

type_any = { type_scoped | type_ | VAR_ }
type_scoped = { label_scoped | VAR_ }
type_ = { label | VAR_ } // A type_can be a label or variable

label_any = { label_scoped | label }
label_scoped = { LABEL_SCOPED_ }
label = { LABEL_ | schema_native | type_native | unreserved }

// LITERAL INPUT VALUES =======================================================

schema_native = { RULE }

type_native = { THING | ENTITY | ATTRIBUTE | RELATION | ROLE }

value_type = { LONG | DOUBLE | STRING | BOOLEAN | DATETIME }
value = { STRING_ | DATETIME_ | DATE_ | DOUBLE_ | LONG_ | BOOLEAN_ }
regex = { STRING_ }

// UNRESERVED KEYWORDS =========================================================
// Most of TypeQL syntax should not be reserved from being used as identifiers

unreserved = { VALUE | MIN | MAX| MEDIAN | MEAN | STD | SUM | COUNT | GET | SORT | LIMIT | OFFSET | GROUP | CONTAINS }


// TYPEQL SYNTAX KEYWORDS =======================================================

// QUERY COMMAND KEYWORDS

MATCH = { "match" }
GET = { "get" }
DEFINE = { "define" }
UNDEFINE = { "undefine" }
INSERT = { "insert" }
DELETE = { "delete" }
COMPUTE = { "compute" }

// NATIVE TYPE KEYWORDS

THING = { "thing" }
ENTITY = { "entity" }
ATTRIBUTE = { "attribute" }
RELATION = { "relation" }
ROLE = { "role" }
RULE = { "rule" }

// DELETE AND GET QUERY MODIFIER KEYWORDS

OFFSET = { "offset" }
LIMIT = { "limit" }
SORT = { "sort" }
ORDER_ = { ASC | DESC }
ASC = { "asc" }
DESC = { "desc" }

// TYPE VARIABLE CONSTRAINT KEYWORDS

TYPE = { "type" }
ABSTRACT = { "abstract" }
SUB_ = { SUB | SUBX }
SUB = { "sub" }
SUBX = { "sub!" }
OWNS = { "owns" }
IS_KEY = { "@key" }
REGEX = { "regex" }
AS = { "as" }
PLAYS = { "plays" }
RELATES = { "relates" }
WHEN = { "when" }
THEN = { "then" }

// THING VARIABLE CONSTRAINT KEYWORDS

IID = { "iid" ~ WB }
ISA_ = { ISA | ISAX }
ISA = { "isa" ~ WB }
ISAX = { "isa!" ~ WB }
HAS = { "has" ~ WB }
VALUE = { "value" ~ WB }
IS = { "is" ~ WB }

// OPERATOR KEYWORDS

OR = { "or" ~ WB }
NOT = { "not" ~ WB }

// PREDICATE KEYWORDS

EQ = { "=" }
NEQ = { "!=" }
GT = { ">" }
GTE = { ">=" }
LT = { "<" }
LTE = { "<=" }
LIKE = { "like" ~ WB }
CONTAINS = { "contains" ~ WB }

// GROUP AND AGGREGATE QUERY KEYWORDS (also used by COMPUTE QUERY)

GROUP = { "group" ~ WB }
COUNT = { "count" ~ WB }
MAX = { "max" ~ WB }
MIN = { "min" ~ WB }
MEAN = { "mean" ~ WB }
MEDIAN = { "median" ~ WB }
STD = { "std" ~ WB }
SUM = { "sum" ~ WB }

// VALUE TYPE KEYWORDS

LONG = { "long" ~ WB }
DOUBLE = { "double" ~ WB }
STRING = { "string" ~ WB }
BOOLEAN = { "boolean" ~ WB }
DATETIME = { "datetime" ~ WB }

// LITERAL VALUE KEYWORDS
BOOLEAN_ = { TRUE | FALSE } // order of lexer declaration matters
TRUE = { "true" ~ WB }
FALSE = { "false" ~ WB }
STRING_ = @{ "\"" ~ (!"\"" ~ !"\\" ~ ANY | ESCAPE_SEQ_ )* ~ "\""
           | "'"  ~ (!"'"  ~ !"\\" ~ ANY | ESCAPE_SEQ_ )* ~ "'"  }
LONG_ = @{ ("+" | "-")? ~ ASCII_DIGIT+ ~ WB }
DOUBLE_ = @{ ("+" | "-")? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ ~ WB }
DATE_ = @{ DATE_FRAGMENT_ ~ WB }
DATETIME_ = @{ DATE_FRAGMENT_ ~ "T" ~ TIME_ ~ WB }

// TYPEQL INPUT TOKEN PATTERNS
// All token names must end with an underscore ("_")
VAR_ = @{ VAR_ANONYMOUS_ | VAR_NAMED_ }
VAR_ANONYMOUS_ = @{ "$_" ~ WB }
VAR_NAMED_ = @{ "$" ~ ASCII_ALPHANUMERIC ~ (ASCII_ALPHANUMERIC | "-" | "_")* ~ WB }
IID_ = @{ "0x" ~ ASCII_HEX_DIGIT+ ~ WB }
LABEL_ = @{ TYPE_CHAR_H_ ~ TYPE_CHAR_T_* ~ WB }
LABEL_SCOPED_ = { LABEL_ ~ ":" ~ LABEL_ ~ WB }


// FRAGMENTS OF KEYWORDS =======================================================

TYPE_CHAR_H_ = { 'A'..'Z' | 'a'..'z'
               | '\u{00C0}'..'\u{00D6}'
               | '\u{00D8}'..'\u{00F6}'
               | '\u{00F8}'..'\u{02FF}'
               | '\u{0370}'..'\u{037D}'
               | '\u{037F}'..'\u{1FFF}'
               | '\u{200C}'..'\u{200D}'
               | '\u{2070}'..'\u{218F}'
               | '\u{2C00}'..'\u{2FEF}'
               | '\u{3001}'..'\u{D7FF}'
               | '\u{F900}'..'\u{FDCF}'
               | '\u{FDF0}'..'\u{FFFD}'
               }
TYPE_CHAR_T_ = { TYPE_CHAR_H_
               | ASCII_DIGIT
               | "_"
               | "-"
               | "\u{00B7}"
               | '\u{0300}'..'\u{036F}'
               | '\u{203F}'..'\u{2040}'
               }
DATE_FRAGMENT_ = { YEAR_ ~ "-" ~ MONTH_ ~ "-" ~ DAY_ }
MONTH_ = { ('0'..'1') ~ ASCII_DIGIT }
DAY_ = { ('0'..'3') ~ ASCII_DIGIT }
YEAR_ = { ASCII_DIGIT{4} | ("+" | "-") ~ ASCII_DIGIT+ }
TIME_ = { HOUR_ ~ ":" ~ MINUTE_ ~ (":" ~ SECOND_ ~ ("." ~ SECOND_FRACTION_)? )? }
HOUR_ = { ('0'..'2') ~ ASCII_DIGIT }
MINUTE_ = { ('0'..'6') ~ ASCII_DIGIT }
SECOND_ = { ('0'..'6') ~ ASCII_DIGIT }
SECOND_FRACTION_ = { ASCII_DIGIT{1,3} } // between 1 and 3 digits
ESCAPE_SEQ_ = { "\\" ~ ANY }

WB = _{ &(PUNCTUATION | WS | EOL_COMMENT) } // Word boundary

SEMICOLON = { ";" }

EOL_COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI) }
WS = _{ " " | "\t" | "\r" | "\n" }
